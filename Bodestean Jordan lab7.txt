*/problema 1
Modificaţi exemplul 3 astfel încât să permită obtinerea unui nou punct, avand coordonatele obtinute prin adunarea coordonatelor a două astfel de puncte.
Numele noului punct va fi rezultat prin concatenarea numelor celor două puncte. Adaugati si testati o metoda care calculeaza distanta de la un punct
la origine. Modificați clasa astfel încât sa eliminați metoda afis() folosind in schimb metode accesor adecvate. Eliminați de asemenea atributul
lungime_sir modificând adecvat metodele
clasei. Adaugati si un move constructor. Testati utilizand si functii specifice sirurilor de caractere din VC++1y/2z (strcpy_s( ) si strcat_s( )).
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string.h>
#include <math.h>
using namespace std;

const int dim_sir = 21;
class CPunctText
{
    int x;
    int y;
    int lungime_sir;    //atribut redundant
    char* sNume;
public:
    //constructor explicit vid
    CPunctText();
    //constructor cu parametri
    CPunctText(int ix, int iy, const char* sText = "Punct");
    //constructor de copiere
    CPunctText(const CPunctText& pct);
    //move constructor (x si y trebuie sa fie pointeri)
  /*  CPunctText(CPunctText&& punct)
    {
        x = punct.x;
        y = punct.y;
        punct.x = nullptr;
        punct.y = nullptr;

    }*/
     //destructor:
    ~CPunctText();
    void setX(int x)
    {
        this->x = x;
    }
    int getX()
    {
        return x;
    }
    void setY(int y)
    {
        this->y = y;
    }
    int getY()
    {
        return y;
    }
    float distanta();

};
CPunctText::CPunctText()
{
  //cout << "\n constructor explicit vid";
    x = y = 0;
    lungime_sir = dim_sir;
    sNume = new (std::nothrow) char[lungime_sir];
    strcpy(sNume, "Veronica");
}
CPunctText::CPunctText(int ix, int iy, const char* sText)
{
   //out << "\n constructor cu parametri";
    lungime_sir = strlen(sText) + 1;
    sNume = new (std::nothrow) char[lungime_sir];
    x = ix;
    y = iy;
    strcpy(sNume, sText);
}
CPunctText::CPunctText(const CPunctText& pct)
{
    //ut << "\n constructor de copiere";
    sNume = new (std::nothrow) char[pct.lungime_sir];
    x = pct.x;
    y = pct.y;
    lungime_sir = pct.lungime_sir;
    strcpy(sNume, pct.sNume);
}
CPunctText::~CPunctText()
{
    delete[] sNume;
}

float CPunctText::distanta()
{
    return (float)sqrt(x * x + y * y);
}

int main()
{
    CPunctText pct1, pct2;
    pct1.setX(4);
    pct1.setY(5);
    cout << "\nCoordonatele punctului 1 sunt: ";
    cout << "\n\tx= " << pct1.getX();
    cout << "\n\ty= " << pct1.getY();
    pct2.setX(8);
    pct2.setY(5);
    cout << "\nCoordonatele punctului 2 sunt: ";
    cout << "\n\tx= " << pct2.getX();
    cout << "\n\ty= " << pct2.getY();
    cout << "\nDistanta dintre punctul 1 si origine este: "<<pct1.distanta();
    
}





//cu getter si setter//


#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string.h>
#include <math.h>
using namespace std;

const int dim_sir = 21;
class CPunctText
{
    int x;
    int y;
    int lungime_sir;    //atribut redundant
    char* sNume;
public:
    //constructor explicit vid
    CPunctText();
    //constructor cu parametri
    CPunctText(int ix, int iy, const char* sText = "Punct");
    //constructor de copiere
    CPunctText(const CPunctText& pct);
    //move constructor (x si y trebuie sa fie pointeri)
  /*  CPunctText(CPunctText&& punct)
    {
        x = punct.x;
        y = punct.y;
        punct.x = nullptr;
        punct.y = nullptr;

    }*/
     //destructor:
    ~CPunctText();
    void setX(int x)
    {
        this->x = x;
    }
    int getX()
    {
        return x;
    }
    void setY(int y)
    {
        this->y = y;
    }
    int getY()
    {
        return y;
    }
    float distanta();

};
CPunctText::CPunctText()
{
  //cout << "\n constructor explicit vid";
    x = y = 0;
    lungime_sir = dim_sir;
    sNume = new (std::nothrow) char[lungime_sir];
    strcpy(sNume, "Veronica");
}
CPunctText::CPunctText(int ix, int iy, const char* sText)
{
   //out << "\n constructor cu parametri";
    lungime_sir = strlen(sText) + 1;
    sNume = new (std::nothrow) char[lungime_sir];
    x = ix;
    y = iy;
    strcpy(sNume, sText);
}
CPunctText::CPunctText(const CPunctText& pct)
{
    //ut << "\n constructor de copiere";
    sNume = new (std::nothrow) char[pct.lungime_sir];
    x = pct.x;
    y = pct.y;
    lungime_sir = pct.lungime_sir;
    strcpy(sNume, pct.sNume);
}
CPunctText::~CPunctText()
{
    delete[] sNume;
}

float CPunctText::distanta()
{
    return (float)sqrt(x * x + y * y);
}

int main()
{
    CPunctText pct1, pct2;
    pct1.setX(4);
    pct1.setY(5);
    cout << "\nCoordonatele punctului 1 sunt: ";
    cout << "\n\tx= " << pct1.getX();
    cout << "\n\ty= " << pct1.getY();
    pct2.setX(8);
    pct2.setY(5);
    cout << "\nCoordonatele punctului 2 sunt: ";
    cout << "\n\tx= " << pct2.getX();
    cout << "\n\ty= " << pct2.getY();
    cout << "\nDistanta dintre punctul 1 si origine este: "<<pct1.distanta();
    
}






/* problema 2
Să se scrie o aplicaţie C/C++ care să modeleze obiectual un tablou unidimensional de numere
reale. Creaţi două instanţe ale clasei şi afișați valorile unui al 3-lea tablou, obținute prin
scăderea elementelelor corespunzătoare din primele 2 tablouri. Dacă tablourile au lungimi
diferite, tabloul rezultat va avea lungimea tabloului cel mai scurt.*/




#include<iostream>
using namespace std;

class tablou
{ private:
        float a;
public:

        
        int getElemente();

        
        void setelemente();
};
void tablou::setelemente()
{
        cin >>a;
        
}


int tablou::getElemente()
{
        return a;
}


int main()
{
        tablou t1[30], t2[30], t3[30];
        float a[50];
        int n, i;
        cout << "nr de elemente primul tablou - ";
        cin >> n;
        cout << endl;
        for (i = 0; i < n; i++)
                t1[i].getElemente();

        cout << "datele tabloului " << endl;
        for (i = 0; i < n; i++) {
                cout << "t1[" << i << "]" << "=";
                        t1[i].setelemente();
        }
        int m;
        cout << "introduceti lungimea celui de al 2-lea sir-";
        cin >> m;
        cout << endl;
        for (i = 0; i < m; i++)
                t2[i].getElemente();

        cout << "datele tabloului " << endl;
        
        for (i = 0; i < m; i++) {
                cout << "t2[" << i << "]" << "=";
                t2[i].setelemente();
        }
        if (n > m) {
                for (i = 0; i < m; i++) {
                        a[i] = t2[i].getElemente()-t1[i].getElemente();
                        cout << a[i] << endl;
                }
        }
        else for (i = 0; i < n; i++) {
                a[i] = t2[i].getElemente() - t1[i].getElemente();
                cout << "t2[" << i << "]" << "="<<a[i] << endl;
        }

        
}


/* problema 3
Modelați clasa Student care să conțină atributele private nume, prenume, note (tablou 7 valori
int), grupa. Alocați dinamic memorie pentru n studenți. Calculați media cu o metoda din clasa
și sortați studenții după medie, afisând datele fiecărui student (nume, prenume, grupa, medie).
Implementati si destructorul clasei care să afișeze un mesaj*/




#include<iostream>
#include<string.h>
using namespace std;

class student
{
private:int nota[7];
           char prenume[20];
           char nume[20];
           int grupa;

public:
        void setNota();
        int getNota();
        void Getdate();
        int getmedia();
                
        


        ~student();
};

void student::setNota() {
        cout << "introduceti numele";
        cin >> nume;
        cout << "introduceti prenumele";
        cin >> prenume;
        int i;
        cout << "intrdoceti notele" << endl;
        for (i = 0; i < 7; i++)cin >> nota[i];cout<< endl;

}
student::~student() {
        cout << "a fost folosit deconstructoru";
}
void student::Getdate() {
        cout << "numele=";
        cout << nume << endl;
        cout << "prenumele";
        cout << prenume << endl;
        for (int i = 0; i < 7; i++)cout << "notele:"<<nota[i] << endl;
        
}
int student::getNota() {
        for (int i = 0; i < 7; i++)return nota[i];
}
int student::getmedia() {
        int s = 0;
        float media = 0;
        for (int i = 0; i < 7; i++) { s = s + nota[i]; }
        media =float( s / 7);
        return media;
}

int comp(const void*a, const void*b) {
        student* p = (student*)a;
        student* c = (student*)b;
        return (c->getmedia() - p->getmedia());

        }



int main() {
        student p1[30];
        int n;
        cout << "introduceti nr de studednti" << endl;
        cin >> n;
        cout << endl;
        for (int i = 0; i < n; i++) {
                p1[i].setNota();
                
        }
        for (int i = 0; i < n; i++) {
                p1[i].Getdate();

        }
        qsort(p1, n, sizeof(student), comp);

        for (int i = 0; i < n; i++) {
                p1[i].Getdate();

        }

        }
                




/*problema 4
Să se scrie o aplicaţie în care se modelează clasa Student cu nume, prenume, numar note si
notele din sesiunea din iarnă declarat printr-un pointer de tip int. Să se afişeze numele
studenţilor din grupă care au restanțe și apoi numele primilor 3 studenți din grupă în ordinea
mediilor, care se va afisa si ea.*/


#include<iostream>
#include<string.h>
using namespace std;

class student
{
private:int nota[7];
           char prenume[20];
           char nume[20];
           int grupa;
           int numar_note;

public:
        void setNota();
        int getNota();
        void Getdate();
        int getmedia();
                
        


        ~student();
};

void student::setNota() {
        cout << "introduceti numele ";
        cin >> nume;
        cout << "introduceti prenumele ";
        cin >> prenume;
        cout << "introduceti nr de note: ";
        cin >> numar_note;
        int i;
        cout << "intrdoceti notele " << endl;
        for (i = 0; i < numar_note; i++) {
                cin >> nota[i];
                cout << endl;
        }

}
student::~student() {
        cout << "a fost folosit deconstructoru";
}
void student::Getdate() {
        cout << "numele= ";
        cout << nume << endl;
        cout << "prenumele= ";
        cout << prenume << endl;
        cout << "nr de note: " << numar_note;
        for (int i = 0; i < numar_note; i++)cout << "notele:"<<nota[i] << endl;
        
}
int student::getNota() {
        for (int i = 0; i < numar_note; i++)return nota[i];
}
int student::getmedia() {
        int s = 0;
        float media = 0;
        for (int i = 0; i < numar_note; i++) { s = s + nota[i]; }
        media = float(s / numar_note); 
        return media;


}



int comp(const void*a, const void*b) {
        student* p = (student*)a;
        student* c = (student*)b;
        return (c->getmedia() - p->getmedia());

        }



int main() {
        student p1[30];
        int n;
        cout << "introduceti nr de studednti" << endl;
        cin >> n;
        cout << endl;
        for (int i = 0; i <n; i++) {
                p1[i].setNota();
                
        }
        for (int i = 0; i < n; i++) {
                p1[i].Getdate();

        }
        cout << endl;
        cout << "elevii cu restantiere" << endl;
        for (int i = 0; i < n; i++) {
                if (p1[i].getmedia() < 5) {
                        p1[i].Getdate();
                }
        }
        cout << endl;
        qsort(p1, n, sizeof(student), comp);
        cout << "primii 3 elevii ordonati descrescatori dupa medie" << endl;
        for (int i = 0; i < 3; i++) {
                p1[i].Getdate();
        }
        }

                
/* problema 1
Construiţi o aplicaţie în care clasa OraCurenta are ca atribute private ora, minutele şi secundele şi metode publice de tip set/get pentru atributele clasei.
 Adaugaţi o functie friend clasei prin care să se poată copia conţinutul unui obiect OraCurenta dat ca si parametru, într-un alt obiect instanţă a aceleiaşi clase care va fi returnat de functie, ora fiind insa modificata la Greenwich Mean Time. Utilizati timpul curent al calculatorului.*/


#include<iostream>
using namespace std;

class Oracurenta {
private:
        int ora;
        int secunda;
        int minut;

public:
        void setOra(int ora){
                this->ora = ora;

        }
        void setMinut(int minut) {
                this->minut = minut;

        }
        void setSecunda(int secunda) {
                this->secunda = secunda;

        }
        int getOra() {
                return ora;
        }
        int getSecunda() {
                return secunda;
        }
        int getMinut() {
                return minut;
        }
        friend int ora(Oracurenta);
};

int ora(Oracurenta k) {
        int ora2;
        ora2 = k.ora - 2;
        return ora2;
}



int main() {
        Oracurenta ob1;
        ob1.setOra(70);
        ob1.setMinut(80);
        ob1.setSecunda(90);
        
        while(ob1.getSecunda() >= 60) {
                ob1.setMinut(ob1.getMinut()+1);
                ob1.setSecunda(ob1.getSecunda()-60);
        }
        while (ob1.getMinut() >= 60) {
                ob1.setMinut(ob1.getMinut() - 60);
                ob1.setOra(ob1.getOra() +1);
        }
        cout << "secunda:" << ob1.getSecunda() << endl;
        cout << "minut:"<<ob1.getMinut()<<endl;
        cout << "ora:" << ob1.getOra() << endl;

        cout << "ora dupa green watch este:" << ora(ob1);
}










/* problema 3
Definţi o clasă numită Repository care are două variabile private de tip întreg. Clasa mai conţine un constructor explicit vid si unul cu 2 parametri şi o metodă accesor care afişează valorile variabilelor din clasă. Scrieţi o clasă numită Mathemathics, friend cu prima clasă, care implementează operaţiile aritmetice elementare (+, -, *, /) asupra variabilelor din prima clasa. Fiecare metoda primeşte ca parametru un obiect al clasei Repository*/




#include<iostream>
#include<string>
using namespace std;

class Repository {
private:int x, y;

public:
        Repository();
        Repository(int a, int b) {
                x = a;
                y = b;
        }
        int getX() {
                return x;
        }
        int getY() {
                return y;
        }
        
};

class Matemathics {

        friend int suma(Repository);
                
        friend int scadere(Repository);
        friend int impartire(Repository);
        friend int inmultire(Repository);
};

 int suma(Repository l) {
        int suma;
        suma = l.getX() + l.getY();
        return suma;
}
 int scadere(Repository l) {
         int scadere;
         scadere = l.getX() - l.getY();
         return scadere;
 }

 int impartire(Repository l) {
         int impartire;
         impartire = l.getX() / l.getY();
         return impartire;
 }
 int inmultire(Repository l) {
         int inmultire;
         inmultire = l.getX() * l.getY();
         return inmultire;
 }

int main() {
        Repository ob1(30, 2);
        cout << ob1.getX() << endl;
        cout << ob1.getY() << endl;
        
        cout << "adunare:"<<suma(ob1) << endl;
        cout <<"scadere:"<< scadere(ob1) << endl;
        cout << "inmultire:"<<inmultire(ob1) << endl;
        cout <<"impartire:"<< impartire(ob1) << endl;
}








/*problema 4
Scrieţi o aplicaţie C/C++ care defineşte într-o clasă variabila publică contor var_static de tip static întreg.
Aceasta se va incrementa în cadrul constructorului. După o serie de instanţieri, să se afişeze numarul de obiecte
create*/

#include<iostream>
using namespace std;

class Obiect
{
        int valoare;
public:
          static int val_static;  //variabila tip static
          Obiect(int val)    //incrementare in cadrul constructorului
          {
                  valoare = val;
                  val_static++;
          }
          int getValoare()
          {
                  return valoare;
          }
          int getVar_static()
          {
                  return val_static;
          }
};
int Obiect::val_static;

int main()
{

        Obiect ob1(120);
        Obiect ob2(1001);
        Obiect ob3(202);
        Obiect ob4(3034);

        cout << "Numarul de obiecte create este: " << Obiect::var_static;

}



/* Bodestean Jordan-Trifon Denisa problema 5
Rezolvaţi problema 4 în cazul în care variabila statică este de tip private. Definiţi o metodă accesor care returnează valoarea contorului.
Analizati cazul in care metoda accesor e statica sau nestatica si modul in care e apelata.*/

#include<iostream>
using namespace std;

class Obiect
{
private: int valoare;
       static int var_static;   //variabila tip static
public:
 
    Obiect(int val)    //incrementare in cadrul constructorului
    {
        valoare = val;
        var_static++;
    }
    int getValoare()
    {
        return valoare;
    }
    int getVar_static()
    {
        return var_static;
    }
    static int getContor()
    {
        return var_static;
    }
};
int Obiect::var_static;

int main()
{

    Obiect ob1(12);
    Obiect ob2(100);
    Obiect ob3(20);
    Obiect ob4(30);
    Obiect ob5(980);

    cout << "Numarul de obiecte create este: " << Obiect::getContor();
}





/*problema 2
Scrieţi o aplicaţie C/C++ în care clasa Calculator are un atribut privat memorie_RAM (int) şi o funcție prietenă tehnician_service( ) care permite modificarea valorii acestui atribut. Functia friend va fi membra intr-o alta clasa, Placa_de_baza care are o componentă denumire_procesor (sir de caractere). Scrieţi codul necesar care permite funcției prietene tehnician_service( ) să modifice (schimbe) valoarea variabilei denumire_procesor si memorie _RAM.*/
 


#include<iostream>
#include<string>
using namespace std;

class Calculator {
private:int memorie_RAM;

public:
        void setMemorie(int memorie) {
                memorie_RAM = memorie;
        }
        int getMemorie() {
                return memorie_RAM;
        }
        friend int tehnician_service(Calculator);

};
        class Placa_de_baza {
                string denumire_procesor;
        public:
                

                friend string tehnician_service(Placa_de_baza );

                Placa_de_baza(string denumire) {
                        
                        denumire_procesor = denumire;


                }
                 string getProcesor() {
                        return denumire_procesor;
                }
                        

        };
        int tehnician_service(Calculator c) {
                int plus;
                
                plus = c.getMemorie() + 6;
                return plus;

        }
        string tehnician_service(Placa_de_baza ) {
                string d;
                d = "asus";
                return d;
        }

        
        int main() {
                Calculator ob1;
                ob1.setMemorie(20);
                cout << "memorie:"<<ob1.getMemorie() << "GB" << endl;
                
                Placa_de_baza ob2("intel");
                cout << "placa:"<<ob2.getProcesor() << endl;
                cout << "noua memorie:"<<tehnician_service(ob1) << "GB" << endl;
                cout << "noua placa:" << tehnician_service(ob2);
                

}

                    
           }
          

};
/*problema 1
Bodestean Jordan
Scrieţi un program C++ în care afişaţi diferite valori în zecimal, octal şi hexazecimal. Afişaţi
valorile aliniate la dreapta, respectiv la stânga într-un câmp de afişare cu dimensiunea 15.
Utilizaţi manipulatorul setfill( ) pentru stabilirea caracterului de umplere şi metodele width( )
şi precision( ) pentru stabilirea dimensiunii câmpului de afişare şi a preciziei. */

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string.h>
#include <math.h>
#include<iomanip>
using namespace std;


int main() {
        //alinierea la dreapta
        cout.width(15);
        cout.setf(ios::right);
        cout << hex << 100<<endl;
        cout.unsetf(ios::right);
        //aliniere la stanga
        cout.width(15);
        cout.setf(ios::left);
        cout << oct << 100 << endl;
        cout.unsetf(ios::left);
        //afisarea Y//
        

        cout << setfill('Y') << setw(15)<<endl;
        cout << setprecision(15);
        cout <<dec<<15 << endl;
        
        
        
        
        return 0;
}

/*problema 2
scrieti o aplicatie C++ in care se citesc de la tastatura date de diferite tipuri, urmand a fi
afisate pe ecran utilizand manipulatorii standard.*/

#include <iostream>
#include <iomanip>    //biblioteca utilizata pentru manipulatorii standard cu parametri
using namespace std;

void main()
{
                cout << hex << 15 << endl;
                cout << oct << 15 << endl;
                cout << setfill('Y') << setw(5);
                cout << 90 << endl;
                cout << setprecision(5);
                cout << 56.32 << endl;
                cout << setprecision(4);
                cout << -10.98730 << endl;

              
                
}




/* problema 5
Supraîncărcaţi operatorii de extracţie şi de inserţie pentru clasa Complex, în care părţile reale
şi imaginare sunt ambele protected de tip real. Derivaţi public o clasă Punct din clasa
Complex, adăugând atributul culoare pentru punctul de coordonate x şi y corespunzător părții
reale, respectiv imaginare a numărului complex. Supraîncărcaţi din nou aceiași operatori de
intrare-ieșire. Instantiati obiecte de tip Complex si Punct si verificati functionalitatea
supraincarcarii operatorilor. Asignati un obiect de tip Punct la unul de tip Complex prin
upcasting si afisati atributele lui*/


#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string.h>
#include <math.h>
#include<iomanip>
using namespace std;

class Complex {
protected: float x, y;
public:
        Complex(int x, int y) { this->x = x; this->y = y; }
                 friend istream& operator>>(istream&, Complex& obj);
                 friend ostream& operator<<(ostream&, Complex obj);
                
                 


};


istream& operator>> (istream& stream, Complex& obj) {
        cout << "introduceti valorile:";
        stream >> obj.x;
        cout << "";
        stream >> obj.y;
        cout<< endl;
        return stream;
}
ostream& operator<<(ostream& stream, Complex obj) {
        cout << "Introduceti coordonatele: ";
        stream << obj.x;
        cout << " ";
        stream << obj.y;
        cout << endl;
        return stream;
}

class Punct:public Complex {

       char culoare;
           float re, im;
public:
        Punct(float re, float im, const char culoare);
        friend istream& operator>>(istream&, Punct& obj);
        friend ostream& operator<<(ostream&, Punct obj);


        
};
Punct::Punct(float re, float im,  const char culoare):Complex(re, im){
        this->culoare = culoare;
}

ostream& operator<<(ostream& stream, Punct obj) {
        cout << "Introduceti coordonatele: ";
        stream << obj.x <<" ";
        stream << obj.y << " ";
        stream << obj.culoare << endl;
        return stream;
}
istream& operator>>(istream& stream, Punct& obj) {
        cout << "introduceti valorile:";
        stream >> obj.x;
        stream >> obj.y;
        stream >> obj.culoare;
        return stream;
}




int main() {

        Complex ob1(3, 5);
        cout << ob1;
        Punct ob2(4,5, 'm');
        cout << ob2;
        //upcasting//
        ob1 = ob2;
        cout << ob1;
        return 0;
}
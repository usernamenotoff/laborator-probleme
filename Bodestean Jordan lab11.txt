/* problema 1
În cazul exemplului 3 (care exemplifică moştenirea simplă, cu clasa de bază Pozitie şi derivată Punct) se cer următoarele:
a. urmariţi şi verificaţi ordinea de apel pentru constructori/destructori
b. extindeţi funcţia main( ) pentru a utiliza toate metodele din clasa de baza şi din clasa derivată
c. introduceţi o nouă clasă Cerc (date şi metode), derivată din clasa Pozitie
d. scrieţi un program ce utilizează aceste clase.*/


#include <iostream>
using namespace std;
// clasa de baza
class Pozitie {
protected:
        int x, y;
public:
        Pozitie(int = 0, int = 0);
        Pozitie(const Pozitie&);//exista unul implicit standard, aici unul diferit
        ~Pozitie();
        //void afisare();
        //void deplasare(int, int);
        virtual void afisare();
        virtual void deplasare(int, int);
};//CB
// constructor
Pozitie::Pozitie(int abs, int ord) {
        x = abs; y = ord;
        cout << "Constructor CB \"Pozitie\", ";
        afisare();
}
//constructor de copiere
Pozitie::Pozitie(const Pozitie& p) {
        x = p.x;
        y = p.y;
        cout << "Constructor de copiere CB \"Pozitie\", ";
        afisare();
}
// destructor
Pozitie::~Pozitie() {
        cout << "Destructor CB \"Pozitie \", ";
        afisare();
}
void Pozitie::afisare() {
        cout << " CB afisare: coordonate: x = " << x << ", y = " << y << "\n";
}
void Pozitie::deplasare(int dx, int dy) {
        cout << "CB: deplasare" << endl;
        x += dx; y += dy;
}
// clasa derivata
class Punct : public Pozitie {
        int vizibil;//ca un flag
        char culoare;
public:
        Punct(int = 0, int = 0, char = 'A');
        Punct(const Punct&);
        ~Punct();
        void arata() {
                vizibil = 1;
        }
        void ascunde() {
                vizibil = 0;
        }
        void coloreaza(char c) {
                culoare = c;
        }
        void deplasare(int, int) override;
        void afisare() override;
};//CD
// constructor
Punct::Punct(int abs, int ord, char c) :Pozitie(abs, ord) {
        vizibil = 0;
        culoare = c;
        cout << "Constructor CD \"Punct\", ";
        afisare();//CD
}
// constructor de copiere
Punct::Punct(const Punct& p) :Pozitie(p.x, p.y) {
        vizibil = p.vizibil;
        culoare = p.culoare;
        cout << "Constructor de copiere CD \"Punct\", ";
        afisare();//CD
}
// destructor
Punct::~Punct() {
        cout << "Destructor CD \"Punct\", ";
        afisare();//CD
}
// redefinire functie de deplasare in clasa derivata
void Punct::deplasare(int dx, int dy) {
        if (vizibil) {
                cout << " CD: Deplasare afisare CD\n";
                x += dx;
                y += dy;
                afisare();//CD
        }
        else {
                x += dx;
                y += dy;
                cout << "Deplasare prin CD afisare din CB\n";
                Pozitie::afisare();
        }
}
// redefinire metoda de afisare in clasa derivata
void Punct::afisare() {
        cout << "Pozitie: x = " << x << ", y = " << y;
        cout << ", culoare: " << culoare;
        if (vizibil) cout << ", vizibil \n";
        else cout << ", invizibil \n";
}

class Cerc :public Pozitie {
        int cadran;
        int x1;
        int y1;
public: Cerc(int = 5, int = 3);
          Cerc(const Cerc&);
          ~Cerc();
          
          void afisare()override;
          void deplasare(int,int)override;
};
//constructor
Cerc::Cerc(int abs, int ord) :Pozitie(abs, ord) {
        abs = x;
        ord = y;
        afisare();
}
Cerc::~Cerc() {
        cout << "Destructor CB \"Cerc\", ";
        afisare();
}
//constructor copiere
Cerc::Cerc(const Cerc& p):Pozitie(p.x, p.y) {
        x1 = p.x;
                y1 = p.y;
}

void Cerc::deplasare(int xx, int yy) {
        cout << " CD: Deplasare afisare CD\n";
        x += xx;
        y += yy;
        afisare();//CD
        Pozitie::afisare();
};

void Cerc::afisare() {
        cout << "Pozitie: x = " << x << ", y = " << y;
        if (x > 0 && y > 0) cadran = 1;
        if (x < 0 && y < 0) cadran = 3;
        if (x > 0 && y < 0) cadran = 4;
        if (x < 0 && y > 0) cadran = 2;
        cout << " cadran: " << cadran << endl;
}

int main() {
        Pozitie pp0(7, 7);//base class object
        cout << "\n Metode CB \n";
        pp0.afisare();
        pp0.deplasare(6, 9);
        pp0.afisare();
        cout << "\n Metode CD \n";
        
        Punct p0(1, 1, 'v');//derived class object
        p0.afisare();
        Punct p1(p0);
        p1.arata();
        p1.deplasare(10, 10);
        cout << "introduceti o culoare";
        char cu;
        cin >> cu;
        p1.coloreaza(cu);//Am adaugat metoda coloreaza
        cout << "\nUpcasting - obiecte:\n";
        pp0 = p0;//upcasting by objects
        pp0.afisare();
        cout << "\nUpcasting - pointeri:\n ";

        Cerc p2(-4,5);
        p2.afisare();
        Cerc c1(p2);
        c1.afisare();
        c1.deplasare(-4, 4);
        c1.afisare();

        Pozitie* p;//base class pointer
        p = new Punct(100, 100, 'Z');//derived object to the base class pointer
        //cout<<"\nAfisare CB: \n"; non virtual
        cout << "\nAfisare CD: derived class object if virtual, else base class CB \n";
        p->afisare();//afis invizibil
        p = &pp0;
        cout << "\nAfisare CB: base class object always\n";
        p->afisare();
        p = &p1;
        cout << "\nAfisare CD: derived class object if virtual, else base class CB \n";
        p->afisare();
        Punct* pp;
        pp = &p1;
        cout << "\nAfisare CD: derived class object always\n";
        pp->afisare();
        cout << "\n Deplasare CD with 10, 10 \n";
        pp->deplasare(10, 10);
        cout << "\nAfisare CD: derived class object with ascunde()\n";
        pp->ascunde();
        pp->afisare();
        cout << "\n Deplasare CD with 10, 10 and ascunde()\n";
        pp->deplasare(10, 10);
        cout << "\nAfisare direct from CB: derived object displayed with base class method always\n";
        pp->Pozitie::afisare();
        cout << "\nDowncasting:\n ";
        Punct* pdown;//derived pointer
        pdown = (Punct*)&pp0;//downcasting by base class object
        cout << "\nAfisare CB: base class object using a derived pointer, else derived class CD \n";
        pdown->afisare();
        pdown = (Punct*)p;//downcasting by derived class object
        cout << "\n Afisare din Derivat, Punct" << endl;
        pdown->afisare();
        Cerc* c;

        c = &p2;
        cout << "\nAfisare CD:derived class object with always()\n";
        c->afisare();
        c = &c1;
        cout << "deplasare with -2,4\n";
        c->deplasare(-2,4);
        cout << "afisare cadran\n";
        c->afisare();

        
        return 0;
}





/* problema 2
La exemplul al patrulea extindeţi clasa de bază cu alte metode virtuale, redefinite în clasele derivate, cum ar fi metode get( ) şi set( ) pentru greutatea vehiculului (variabila greutate).*/

#include <iostream>
using namespace std;
class Vehicul {
protected:
        int roti;
        float greutate;
public:
        virtual void mesaj() {
                cout << "Mesaj din clasa Vehicul\n";
        }
//virtual setter
        virtual void setGreutate(int g) {
                greutate = g;
        }
//virtual getter
        virtual virtual int getGreutate() {
                return greutate;
        }
        virtual void setRoti(int r) {
                roti = r;
        
        }
        virtual int getRoti() {
                return roti;
        }
};
class Automobil : public Vehicul {
        int incarcatura_pasageri;
public:
        void mesaj() override {
                cout << "Mesaj din clasa Automobil" <<" Greutatea:"<<getGreutate()<<endl;
        }
        
};
class Camion : public Vehicul {
        int incarcatura_pasageri;
        float incarcatura_utila;
public:
        int pasageri() {
                return incarcatura_pasageri;
        }
        void mesaj() override {
                cout << "Mesaj din clasa Camion" << " Greutatea:" << getGreutate() << endl;
        }
};
class Barca : public Vehicul {
        int incarcatura_pasageri;
public:
        int pasageri() {
                return incarcatura_pasageri;
        }
        void mesaj() override {
                cout << "Mesaj din clasa Barca"<<" Greutatea:" << getGreutate() << endl;
        }
};
//main
int main() {
        // apel direct, prin intermediul unor obiecte specifice
        Vehicul monocicleta;
        Automobil ford;
        Camion semi;
        Barca barca_de_pescuit;
        monocicleta.setGreutate(20);
        ford.setGreutate(50);
        semi.setGreutate(60);
        barca_de_pescuit.setGreutate(22);
        monocicleta.mesaj();
        ford.mesaj();
        semi.mesaj();//din Vehicul ca si CB
        barca_de_pescuit.mesaj();
        
        
        
        // apel prin intermediul unui pointer specific
        Vehicul* pmonocicleta;
        Automobil* pford;
        Camion* psemi;
        Barca* pbarca_de_pescuit;
        cout << "\n";
        pmonocicleta = &monocicleta;
        pmonocicleta->mesaj();
        pford = &ford;
        pford->mesaj();
        psemi = &semi;
        psemi->mesaj();//din CB
        pbarca_de_pescuit = &barca_de_pescuit;
        pbarca_de_pescuit->mesaj();
        // apel prin intermediul unui pointer catre un obiect al clasei de baza
        cout << "\n";
        pmonocicleta = &monocicleta;
        pmonocicleta->mesaj();//Vehicul
        pmonocicleta = &ford;//upcasting
        pmonocicleta->mesaj();//Automobil
        pmonocicleta = &semi;//upcasting
        pmonocicleta->mesaj();//Camion- Vehicul
        pmonocicleta = &barca_de_pescuit;//upcasting
        pmonocicleta->mesaj();//Barca
        return 0;
}




/* problema 3
Să se scrie un program C++ în care se defineşte o clasă Militar cu o metodă publică virtuală sunt_militar( ) care indică apartenenţa la armată. Derivaţi clasa Militar pentru a crea clasa Soldat şi clasa Ofiter. Derivaţi mai departe clasa Ofiter pentru a obtine clasele SubLocotenent, Locotenent, Capitan, Maior, Colonel, General. Redefiniti metoda sunt_militar( ) pentru a indica gradul militar pentru fiecare clasa specifica. Instantiati fiecare clasa Soldat, Locotenent,...,General, si apelati metoda sunt_militar( ).*/


#include<iostream>
using namespace std;

class Militar {
public:
        virtual void sunt_militar() { cout << "sunt militar\n"; }
};

class Soldat :public Militar {

public:void sunt_militar()override {
                cout << "\nsoldat\n";
        }
};
class Ofiter :public Militar {
public: void sunt_militar()override {
                cout << "\nofiter\n";
        }

};


class Sublocotenent :public Ofiter {

public:void sunt_militar()override {
                cout << "\nsublocotenent\n";
        }
};

class Locotenent :public Ofiter {
public:
        void sunt_militar()override {
                cout << "\nLocotenent\n";
        }
};


class Capitan :public Ofiter {
public:void sunt_militar()override {
                cout << "\ncapitan\n";
        }
};

class Maior :public Ofiter {
public:void sunt_militar()override {
                cout << "\nmaior\n";
        }

};
class Colonel :public Ofiter {

public:void sunt_militar()override {
                cout << "\ncolonel\n";
        }

};

class General :public Ofiter {
public:
        void sunt_militar()override {
                cout << "\ngeneral\n";
        }

};

int main() {
        Militar p1;
        p1.sunt_militar();
        Soldat p2;
        p2.sunt_militar();
        Ofiter p3;
        p3.sunt_militar();
        Sublocotenent p4;
        p4.sunt_militar();
        Locotenent p5;
        p5.sunt_militar();
        Capitan p9;
        p9.sunt_militar();
        Maior p6;
        p6.sunt_militar();
        Colonel p7;
        p7.sunt_militar();
        General p8;
        p8.sunt_militar();
        

        return 0;
}


/*problema 4
Declarati o clasa Animal, care va contine o metoda pur virtuala, respira( ) si doua metode virtuale 
manaca( ) si doarme( ). Derivati in mod public o clasa Caine si alta Peste, care vor defini 
metoda pur virtuala, 
iar clasa Caine va redefini metoda mananca( ), iar Peste metoda doarme( ).
Instantiati obiecte din cele doua clase si apelati metodele specifice. Definiti apoi un tablou de tip
Animal,care va contine obiecte din clasele derivate, daca e posibil. Daca nu, gasiti o solutie adecvata.
*/



#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<string.h>
using namespace std;

class Animal {

public:
        virtual void respira() = 0;
        virtual void mananca() { cout << "not override\n"; }
        virtual void doarme() {cout << "not override\n"; }


};
class Peste :public Animal {
public:
        void respira() { cout << "pe uscat\n"; }
        void doarme() override { cout << "overrided\n"; }
        
};

class Caine :public Animal {
public:
        void respira() { cout << "sub apa\n"; }
        void mananca()override {
                cout << "overrided \n";
        }
};

int main() {
        Caine c;
        Animal* d;
                Peste p;
        
                d = &c;
                cout << "caine" << endl;
                d->mananca();
                d->doarme();
                d->respira();
                
                d = &p;
                cout << "peste" << endl;
                d->mananca();
                d->doarme();
                d->respira();
                return 0;

}

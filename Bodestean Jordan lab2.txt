// problema 1:
//sa se faca aranjamente cu o functie recursiva//
#include<iostream>
using namespace std;
int aranjamente(int,int);

int main()
{
        int a;
        int b;
        cin >> a>>b;
        cout << aranjamente(a,b) << endl;                



}
int aranjamente(int n,int k) {
        
        
        if (k == 1)return n;
        else return n * aranjamente(n - 1, k - 1);
        
                }





//problem 2
Calculati k Cn , n si k fiind preluate de la tastatura, k<n, utilizând o funcţie recursivă.//

#include<iostream>
using namespace std;
int combinari(int, int);

int main()
{
    int a;
    int b;
    cin >> a >> b;
    cout << combinari(a, b) << endl;



}
int combinari(int n, int k) {


    if (k > n)return 0;
    if (k == 0||    k==n)return 1;
   return (combinari(n - 1, k) + combinari(n - 1, k - 1));

}




//problema 3//
//Calculul celui mai mare divizor comun a două numere folosind o funcţie recursivă.//

#include<iostream>
using namespace std;
int cmmdc(int m, int n);
int main()
{
    int a;
    int b;
    cin >> a >> b;
   
    cout << cmmdc(a, b) << endl;


}

int cmmdc(int m, int n) {
    if (m == 0 || n == 0)return m + n;
    if (m > n)return cmmdc(m % n, n);
    if (m < n)return cmmdc(m, n % m);
}






//problema 5
//Citiţi un şir de caractere de la tastatură, caracter cu caracter, cu ajutorul unei funcţi bazate pe
caracter. Afişaţi şirul în ordine inversă folosind o funcţie recursivă.//
#include<iostream>
#include<math.h>
using namespace std;

using namespace std;


void reverse(string str,int k=0)
{
    if (k==str.size())
    {
        return;
    }
    reverse(str,k+1);
    cout << str[k];
}


int main()
{
    string a;
    cin >> a;
    reverse(a);
    return 0;
}





//problema 7//
//Să se calculeze suma numerelor impare dintr-un tablou unidimensional de numere întregi în
mod recursiv, tablou citit dintr-un fişier unde, ca primă valoare, avem numărul de elemente ale
tabloului.//


#include<iostream>
#include<math.h>
using namespace std;

#define MAX 20
#define n 5 //introduceti nr de numere//
int nrimpare(int[MAX]);

int main()
{
        int c[MAX];
        
        int i;
        for (i = 0; i < n; i++) {
                cin >> c[i];
        }
        
        cout << nrimpare(c);






}

int nrimpare(int a[MAX]) {
        int i;

        int s = 0;
        for (i = 0; i < n; i++) {
                if (a[i] % 2 != 0)s = s + a[i];


        }
        return s;

}








//problema 8//
//Analog cu problema precedentă, dar se calculează produsul elementelor aflate pe poziţii
impare într-un tablou unidimensional, respectiv să se calculeze suma numerelor prime din
tablou//
#include<iostream>
#include<math.h>
using namespace std;

#define MAX 20
#define n 5
int nrimpare(int[MAX]);

int main()
{
        int c[MAX];
        
        int i;
        for (i = 0; i < n; i++) {
                cout <<"pozitia"<<i<<" =" ;
                cin >> c[i];
                cout << endl;
        }
        
        cout << nrimpare(c);






}

int nrimpare(int a[MAX]) {
        int i;
        int j;
        int k ;
        int s = 0;
        for (i = 1; i < n; i + 2) {
                k = 0;
                for (j = 1; j < a[i]; j++) {
                        if (a[i] % j == 0)k++;

                        if (k == 2) s = s + a[i];
                }
        }
        return s;

}








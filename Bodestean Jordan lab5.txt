/*Bodestean Jordan problema 5
Să se scrie programul care implementează clasa Numar cu un atribut de tip int val şi care, în
cadrul funcţiei main(), declară un obiect de tipul clasei şi apoi un pointer la acesta, prin
intermediul cărora se va afişa pe ecran rezultatul adunării a două numere de tip Numar cu
valorile preluate de la tastatură in cadrul unor obiecte Numar. Implementati metoda int
suma_nr(Numar) care realizeaza suma în cadrul clasei şi o returneaza ca un int, metoda care
insumeaza cele doua obiecte (curent si parametru). Implementati metoda in cadrul clasei si
alta metoda cu acelas scop, dar nume diferit, in afara clasei.*/

#include<iostream>
using namespace std;

class ceva {

public:
	int plus(int x, int y) {
		
		return x + y;
	}
	int minus(int x, int y) {

		return x - y;
	}
	int inmultire(int x, int y) {

		return x* y;
	}
	float impartire(int x, int y) {

		return float(x/y);
	}

};

class ceva2 {
	int x, y;
public:
	void setX(int x) {
		this->x = x;
	}
	void setY(int y) {
		this->y = y;
	}
	int plus() {

		return x + y;
	}
	int minus() {

		return x - y;
	}
	int inmultire() {

		return x * y;
	}
	float impartire() {

		return float(x / y);
	}
};

int main() {
	ceva p1;
	cout << "introduceti 2 valori";
	int n, m;
	cin >> n >> m;
	cout<<p1.plus(n,m)<<endl;
	if (n > m) {
		cout << p1.minus(n, m) << endl;
	}
	else cout << p1.minus(m, n)<<endl;
	cout << p1.impartire(n, m) << endl;
	cout << p1.inmultire(n, m)<<endl;


	ceva2 p2;
	p2.setX(5);
	p2.setY(6);
	cout << p2.impartire()<<endl;
	cout << p2.inmultire()<<endl;
	cout << p2.minus() << endl;
	cout << p2.plus() << endl;
}











/* Bodestean Jordan problema 8
Pornind de la clasa Complex, ex.4, să se implementeze operațiile de adunare, scădere,
înmulțire și împărțire pentru numere complexe prin metode corespunzătoare implementate la
alegere în clasă și/sau în afara ei. Testați aceste metode prin instanțierea unor obiecte.
Metodele vor returna obiecte de tip Complex si in main() vor fi afisate rezultatele folosind
metode accesor.*/


#include <iostream>
using namespace std;
class Complex {
	double re, im;
public:
	void setRe(double x) {
		re = x;
	}
	void setIm(double x) {
		im = x;
	}
	double getRe() {
		return re;
	}
	double getIm() { return im; }
	Complex sum(Complex c);
	Complex difference(Complex c);
	Complex multi(Complex c);
	Complex div(Complex c);
};
Complex Complex::sum(Complex c) {
	Complex rez;
	rez.re = (re + c.re);
	rez.im = (im + c.im);
	return rez;
}


Complex Complex::difference(Complex b) {
	Complex rez;
	rez.re = (b.re - re);
	rez.im=(b.im - im);
	return rez;
}

Complex Complex::multi(Complex c) {
	Complex rez;
	rez.re = (c.re * re);
	rez.im = (c.im * im);
	return rez;
}
Complex Complex::div(Complex c) {
	Complex rez;
	rez.re = (c.re / re);
	rez.im = (c.im / im);
	return rez;
}
int main() {
	
	Complex re1, r2;
	re1.setRe(5);
	re1.setIm(6);
	re1.getRe();
	re1.getIm();
	r2.setRe(6);
	r2.setIm(7);
	r2.getRe();
	r2.getIm();
	Complex c,b;
	c = re1.sum(r2);//suma
	cout << c.getRe()<<endl;
	cout << c.getIm()<<endl;
	b= re1.difference(r2);//diferenta
	cout << b.getRe()<<endl;
	cout << b.getIm()<<endl;
	c = re1.div(r2);//impart.
	cout << c.getIm() << endl;
	cout << c.getRe() << endl;
	c = re1.multi(r2);
	cout << c.getIm() << endl;
	cout << c.getRe() << endl;

	return 0;

}



/*Bodestean Jordan problema 4
Să se scrie programul care implementează clasa Numar cu un atribut de tip int val şi care, în
cadrul funcţiei main(), declară un obiect de tipul clasei şi apoi un pointer la acesta, prin
intermediul cărora se va afişa pe ecran rezultatul adunării a două numere de tip Numar cu
valorile preluate de la tastatură in cadrul unor obiecte Numar. Implementati metoda int
suma_nr(Numar) care realizeaza suma în cadrul clasei şi o returneaza ca un int, metoda care
insumeaza cele doua obiecte (curent si parametru). Implementati metoda in cadrul clasei si
alta metoda cu acelas scop, dar nume diferit, in afara clasei.*/


#include<iostream>
using namespace std;

class Numar {

private: int val;

public:
	 void setval(int val){
		 this->val = val;
	}

	 int getval() {
		 return val;
	 }
	 Numar suma_nr(Numar c);
};
 Numar Numar::suma_nr(Numar c) {
	 Numar rez;
	 rez.val = (val + c.val);
	 return rez;
}

int main() {
	Numar ob1, ob2;
	ob1.setval(5);
	ob1.getval();
	ob2.setval(6);
	ob2.getval();
	Numar c;
c=ob1(ob2);
cout<<c.getval();
}







/*problema 1
Să se scrie o aplicaţie C/C++ care foloseşte o structură de date cu numele Scerc care conţine raza ca şi o variabilă de tip întreg.
 Într-un program C/C++, declaraţi două variabile c1, c2 de tip Scerc şi calculaţi aria şi circumferinţa lor pentru
 valori ale razei introduse de la tastatură.
 Aceleaşi cerinţe vor fi implementate în aceiasi aplicaţie folosind o clasă numită Cerc cu atributul raza de tip private, 
clasă ce va conţine pe lângă metodele de calcul ale ariei şi perimetrului un constructor explicit cu parametru,un destructor.
 Introduceţi in clasă o metodă de tip accesor, getRaza(), care permite accesul la data privată raza si pe care
 sa o folositi pentru a afisa in main( ) raza obiectelor.
Definiţi mai multe obiecte de tip Cerc la care să accesaţi metodele specifice folosind obiectele instanţiate, pointeri la obiecte,
 referinţe la obiecte.
*/




//cu structura//
#include <iostream>
using namespace std;
int main(){
	struct Scerc {
		int raza;
		
	}c1,c2;
	cout << "introduceti razele de la tastatura" << endl;
	cin >> c1.raza;
		cout << endl;
		cin >> c2.raza;
			cout << endl;
	float  aria1 = 3.14 * (c1.raza * c1.raza);
	float aria2 = 3.14 * (c2.raza * c2.raza);
	cout << "aria cercului pentru c1ceste=" << aria1 << endl;
	cout << "aria cercului pentru c2 este =" << aria2 << endl;
	float circumferinta1 = 3.14 * 2 * c1.raza;
	float circumferinta2 = 3.14 * 2 * c2.raza;
	cout << "circumferinta cerc pentru c1 =" << circumferinta1 << endl;
	cout<<"circumferinta cerc pentru c2 = " << circumferinta2 << endl;
	

	
}



//cu clase//


#include <iostream>
using namespace std;


class Cerc {
private:int raza;


public:
	Cerc(int c = 5);
	float aria();
	float perimetru();
	int GetRaza();
	~Cerc();
	
};
Cerc::Cerc(int c) {
	raza = c;
}

Cerc::~Cerc() {
	cout << "\nam apelat deconstructorul";
};

float Cerc::aria() {
	return 3.14 * raza * raza;
};


float Cerc::perimetru() {
	return 2 * 3.14 * raza;
}

int Cerc:: GetRaza() {
	return raza;
}

int main() {
	Cerc arie, perimetru, raza;

	cout << "aria cercului este=" << arie.aria() << endl;
	cout << "perimetrul este=" << perimetru.perimetru() << endl;
	cout << "raza cercului este=" << raza.GetRaza() << endl;


}




*/problema 2
Să se definească o clasă numită myString (într-un fişier numit strClass.h) care să fie compusă
din metodele specifice care efectuează următoarele operaţii pe şiruri de caractere:
- determină lungimea şirului primit la intrare.
- determină ultima poziţie de apariţie a unui anumit caracter din şirul de intrare.
- returnează şirul primit la intrare, scris cu caractere majuscule.
- returnează şirul primit la intrare, scris cu caractere minuscule.
- returnează numărul de apariţii ale unui anumit caracter din şirul primit
*/


#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
using namespace std;
#include<string>

class myString {
	char sir[20];
public:
	void setSir(const char m[20]) {
		strcpy(sir, m);
	}

	int getLungime() {
		return strlen(sir);
	}

	char* getSir() {
		return sir;
	}
};


#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
using namespace std;
#include<string>

int main() {
	int contor = 0;
	  char n;
	cout << "introduceti o litera";
	cin >> n;
	myString p1;
	p1.setSir("amiaza");
	cout << p1.getSir()<<endl;
	cout << p1.getLungime()<<endl;
}
	
	


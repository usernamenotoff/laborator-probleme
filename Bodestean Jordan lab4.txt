/*problema1
Implementaţi metoda bulelor (Bubble-Sort) care foloseşte un indicator flag şi optimizează ciclul interior. Se
cere atât scrierea funcţiei, cât şi partea de program care face citirea şi afişarea şirului iniţial şi a celui ordonat.*/

#define _CRT_SECURE_NO_WARNINGS
#include <search.h>
#include<iostream>

using namespace std;

void sortare(int n, int p[25]) {
        int i;
        int flag = 0;
        int aux;
        int j;
        for ( j = 0; j < n; j++) {
                flag = 0;

                for (i = 0; i < n-1; i++) {
                        if (p[i] > p[i + 1]) {
                                aux = p[i];
                                p[i] = p[i + 1];
                                p[i + 1] = aux;
                                flag = 1;
                        }
                }
                        if (flag == 0)break;
                
        }
        
}
int main() {
        int n;
        int a[25];
        cout << "introduceti nr de elemente" << endl;
        cin >> n;
        int i;
        for (i = 0; i < n; i++) {
                cout << "a" << "[" << i << "]" << "=";
                cin >> a[i];
                cout << endl;
        }

        for (i = 0; i < n; i++) {
                cout << a[i] << endl;
        }//sirul initial

        sortare(n, a);
        cout << endl;
        for (i = 0; i < n; i++) {
                cout << a[i] << endl;
        }//sirul ordonat


}







/* problema 2
Modificaţi programul care exemplifică metoda de sortare rapidă explicita (Quick-Sort) aşa încât să ordoneze
şirul iniţial în ordine descrescătoare.*/

#include <iostream>
using namespace std;
#include <time.h>//pentru unele versiuni de compilatoare
void init(int numere[], int);
void afis(int numere[], int);
void quick(int numere[], int);
int comparare(const void* arg1, const void* arg2);
int main() {
        int dim, * numere;
        cout << "\nIntrodu nr. elemente: ";
        cin >> dim;
        numere = new (std::nothrow) int[dim];
        if (numere == 0) { cout << "\nErr. alocare elemente: \n"; exit(1); }
        init(numere, dim);
        afis(numere, dim);
        
        
        quick(numere, dim);
        afis(numere, dim);
        delete[]numere;
}
void init(int numere[], int dim)
{
        clock_t start, end;
        double dif;
        time_t t;
        start = clock();
        srand((unsigned)time(&t));//srand((unsigned)time(0));
        for (int i = 0; i < dim; i++) {
                numere[i] = rand();
        }
        end = clock();
        dif = (double)(end - start);
        cout << "\nGenerarea numerelor a durat (clicks) " << dif << " si (seconds) " << dif / CLOCKS_PER_SEC
                << endl;
}
void afis(int numere[], int dim)
{
        clock_t start, end;
        double dif;
        start = clock();
        for (int i = 0; i < dim; i++)
                cout << " " << numere[i];
        end = clock();
        dif = (double)(end - start);
        cout << "\nAfisarea numerelor a durat (clicks) " << dif << " si (seconds) " << dif / CLOCKS_PER_SEC <<
                endl;
}

void quick(int numere[], int dim) {
        clock_t start, end;
        double dif;
        start = clock();
        qsort(numere, dim, sizeof(numere[0]), comparare);
        end = clock();
        dif = (double)(end - start);
        cout << "\nOrdonarea cu \"quick sort\" a numerelor a durat (clicks) " << dif << " si (seconds) " << dif /
                CLOCKS_PER_SEC << endl;
}
int comparare(const void* arg1, const void* arg2)
{
        return (*(int*)arg2 - *(int*)arg1);//ordonarea descrescatoare//
}





/* problema 3
Folosiţi funcţiile de bibliotecă pentru sortări (qsort( )) pentru a aranja un tablou unidimensional de înregistrări
cu nume, prenume, cod numeric personal, data angajării după două câmpuri la alegere (un exemplu ar fi:
crescător după nume şi descrescător după data angajării).*/




#include <iostream>
using namespace std;

struct data_angajarii {
        int luna;
        int zii;
        int an;
};

struct Pers {
        char nume[25];
        char prenume[25];

        int cod_numeric;
        struct data_angajarii data;
};
        
        void citDatePers(Pers p[], int n) {
                int i;
                for (i = 0; i < n; i++) {
                        cout << "\nNumele: ";
                        cin >> p[i].nume;
                        cout << "\nPrenumele: ";
                        cin >> p[i].prenume;
                        cout << "\n Cod: ";
                        cin >> p[i].cod_numeric;
                        cout << "\nData angajarii";
                        cout << "\nzii:";
                        cin >> (p[i].data).zii;
                        cout << "\nluna:";
                        cin >> (p[i].data).luna;
                        cout << "\nan:";
                        cin >> (p[i].data).an;

                }
        }
void afisDatePers( Pers p[], int n) {
        int i;
        for (i = 0; i < n; i++) {
                if ((p[i].data).zii <= 31 && (p[i].data).luna <= 12 && (p[i].data).an >= 1900) {
                        cout << "\n Numele: " << p[i].nume;
                        cout << "\n Prenumele: " << p[i].prenume;
                        cout << "\n Cod: " << p[i].cod_numeric;
                        cout << "\n Data anagajarii: ";
                        cout << "\n\t ziua: " << (p[i].data).zii;
                        cout << "\n\t ziua: " << (p[i].data).luna;
                        cout << "\n\t ziua: " << (p[i].data).an;
                }
                else {
                        cout << "introdu data potrivita";
                 break;
                }
        }
}
int cmp(const void* a, const void* b);



int main() {
        int n;
        struct Pers c[25];

        cout << "introduceti nr de persoane";
        cin >> n;
        cout << endl;
        int i;

        citDatePers(c, n);
        cout << endl;
        afisDatePers(c, n);
        qsort(c, n, sizeof(c[0]), cmp);
        cout << endl;
        afisDatePers(c, n);

}
int cmp(const void* a, const void* b);
        

int cmp(const void* aa, const void* bb)
{
        Pers* a = (Pers*)aa;
        Pers* b = (Pers*)bb;
        if ((a->data).an > (b->data).an) return 1;
        else
                if ((a->data).an < (b->data.an)) return -1;
                else {
                        if ((a->data).luna > (b->data).luna) return 1;
                        else if ((a->data).luna < (b->data).luna) return -1;
                        else {
                                if ((a->data).zii > (b->data).zii)
                                        return 1;
                                else if ((a->data).zii < (b->data).zii)
                                        return -1;
                                else
                                        if ((strcmp(a->nume, b->nume) > 0)) return 1;
                                        else if ((strcmp(a->nume, b->nume) < 0)) return -1;
                                return 0;
                        }
                }
}
















/*problema 4
//Scrieţi o aplicaţie C/C++ in care plecând de la două tablouri (unidimensionale) de numere naturale să se obţină
un al treilea tablou care să conţină toate elementele tablourilor sursă fără a se repeta, aranjate în ordine
crescătoare*/

#include <iostream>
using namespace std;

#include <iostream>

using namespace std;

int main()

{

        int u[1000], v[1000], m, n, i, j, a[2000], k = 1, aux;

        cout << "introduceti nr de elemente a primului sir";
        cin >> m;
        cout << endl;
        for (i = 1; i <= m; i++){
                cout << "u[" << i << "]" << "=";
        cin >> u[i];
        cout << endl;
}

        
        cout << "introduceti nr de elemente pentru al doilea sir";
        cin >> n;
        cout << endl;
        for (j = 1; j <= n; j++) {
                cout << "v[" << j << "]" << "=";
                cin >> v[j];
                cout << endl;
        }

        // sortez primul sir crescator//

        for (i = 1; i < m; i++)

        {

                for (j = i + 1; j <= m; j++)
                {

                        if (u[i] > u[j])
                        {
                                aux = u[i];

                                u[i] = u[j];

                                u[j] = aux;
                        }
                }
        }

        // sortez al doilea sir//

        for (i = 1; i < n; i++)
        {
                for (j = i + 1; j <= n; j++)

                {
                if (v[i] > v[j])
                        {
                                aux = v[i];

                                v[i] = v[j];

                                v[j] = aux;

                        }
                }
        }

        i = 1;

        j = 1;

        while (i <= m && j <= n)
        {
                if (u[i] < v[j]) {
                        a[k++] = u[i++];
                }
                else
                {

                        if (u[i] > v[j])

                                a[k++] = v[j++];

                        else

                        {

                                a[k++] = u[i++];

                                j = j + 1;

                        }

                }

        }

        while (i <= m) {

                a[k++] = u[i++];

                while (j <= n)

                        a[k++] = v[j++];
        }

        // afisarea vectorului obtinut conform cerintei

        for (i = 1; i < k; i++)
                cout << a[i] << " ";

        return 0;

}




















/*problema 6
//Cititi de la tastatura m elemente de tip intreg intr-un tablou unidimensional si o valoare intreaga n<m. Impartiti
tabloul citit in doua sub-tablori astfel:
a) primul subtablou va contine primele n elemente din tabloul initial
b) al doilea subtablou va contine restul elementelor din tablul initial.
Sa se realizeze urmatoarele operatii:
 1. sa se ordoneze crescator cele doua subtablouri
 2. sa se sorteze tabloul initial, prin interclasarea celor doua subtablori ordonate. (merge-sort)*/


#include <iostream>
using namespace std;

void tablou1(int a[], int m) {
        int i;
        for (i = 0; i < m; i++) {
                cout << "a[" << i << "]" << "=";
                cin >> a[i];
                cout << endl;
        }
}

void ordonare(int[], int, int);
void ordonare2(int[], int);

int main()
{
        int a[25], v[25];
        int m, i, j;
        cout << " introduceti nr de elemente pentru primul tablou ";
        cin >> m;
        cout << endl;
        tablou1(a, m);
        int n;
        cout << "introduceti nr de elemente pentru al doilea tablou";
        cin >> n;




        

        
        int k = 0;
        if (n < m) {
                i = 0;
                j = 0;
                while (i < n && j < n) {
                        v[j] = a[i];

                        j++;
                        i++;
                        k++;
                }


        }
else cout << "introduceti alt n";
        
        for (j = 0; j < n; j++) {
                cout <<"v["<<j<<"]"<<"="<< v[j] << endl;
        }
        for (i = k; i < m; i++) {
                cout <<"a["<<i<<"]"<<"="<<a[i] << endl;
        }

        ordonare(a, n, k);

        for (i = k; i < m; i++) 
                cout << a[i] << endl;
        
        ordonare2(v, n);

        for (i = 0; i < n; i++)cout << "a[" << i << "]" << "="<< v[i] << endl;

        return 0;




}
void ordonare(int a[], int m, int k) {
        int i, j, aux;
        cout << endl;
        cout <<"k="<< k;
        for (j = 0; j < m; j++) {
                for (i = k; i < m - 1; i++) {

                        if (a[i] > a[i + 1]) {
                                aux = a[i];
                                a[i] = a[i + 1];
                                a[i + 1] = aux;
                        }

                }
        }
}




void ordonare2(int v[], int n) {
        int i, j, aux;
        cout << endl;
        
        for (j = 0; j < n; j++) {
                for (i = 0; i < n - 1; i++) {

                        if (v[i] > v[i + 1]) {
                                aux = v[i];
                                v[i] = v[i + 1];
                                v[i + 1] = aux;
                        }

                }
        }
}
